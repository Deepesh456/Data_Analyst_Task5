# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14DBFeBNG29zaVBDNi6F2fCRtZ4re9hxS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

train_df=pd.read_csv('/content/drive/MyDrive/Titanic/train.csv')
test_df=pd.read_csv('/content/drive/MyDrive/Titanic/test.csv')

train_df

test_df

train_df.info()

test_df.info()

train_df.shape

test_df.shape

"""# COUNT OF **SURVIVORS**"""

sns.countplot(x='Survived',data=train_df)
plt.title('Survived Count')
plt.xlabel('Survived')
plt.ylabel('No of Passengers')
plt.show()

"""# **SURVIVAL BY GENDER**"""

sns.barplot(x='Sex',y='Survived',data=train_df)
plt.title('Survival Rate by Gender')
plt.xlabel('Gender')
plt.ylabel('Survival Rate')
plt.show()

"""# **SURVIVAL BY PASSENGER CLASS**"""

sns.barplot(x='Pclass',y='Survived',data=train_df)
plt.title('Survival Rate by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.show()

train_df.isna().sum()

test_df.isna().sum()

train_df['Age']=train_df.groupby(['Sex','Pclass'])['Age'].transform(lambda x:x.fillna(x.median()))
test_df['Age'] = test_df.groupby(['Sex', 'Pclass'])['Age'].transform(lambda x: x.fillna(x.median()))

"""Since when we replace null value with mode,it doesn't reflect passenger variation (e.g., young vs old, rich vs poor)."""

train_df.isna().sum()

test_df.isna().sum()

train_df.drop(columns=['Cabin'],inplace=True)
test_df.drop(columns=['Cabin'],inplace=True)

train_df.isna().sum()

test_df.isna().sum()

train_df['Embarked']=train_df['Embarked'].fillna(train_df['Embarked'].mode()[0])
test_df['Fare']=test_df['Fare'].fillna(test_df['Fare'].mean())

train_df.isna().sum()

train_df.dtypes

train_df['Title']=train_df['Name'].str.extract('([A-Za-z]+)\.',expand=False)
train_df.drop(columns=['Name','Ticket','PassengerId'],inplace=True)

test_df['Title']=test_df['Name'].str.extract('([A-Za-z]+)\.',expand=False)
test_df.drop(columns=['Name','Ticket','PassengerId'],inplace=True)

train_df['Title'].unique()

test_df['Title'].unique()

train_df['Title'].value_counts()

rare_titles=['Don', 'Rev', 'Dr', 'Mme', 'Ms',
       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess',
       'Jonkheer','Dona']
train_df['Title']=train_df['Title'].replace(rare_titles,'Rare')
test_df['Title']=test_df['Title'].replace(rare_titles,'Rare')

train_df['Title'].unique()

test_df['Title'].unique()

train_df.dtypes

test_df.dtypes

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
train_df['Sex']=lb.fit_transform(train_df['Sex'])
train_df['Embarked']=lb.fit_transform(train_df['Embarked'])
train_df['Title']=lb.fit_transform(train_df['Title'])
test_df['Sex']=lb.fit_transform(test_df['Sex'])
test_df['Embarked']=lb.fit_transform(test_df['Embarked'])
test_df['Title']=lb.fit_transform(test_df['Title'])

train_df.dtypes

test_df.dtypes

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
x_train=train_df.drop('Survived',axis=1)
y_train=train_df['Survived']

model=RandomForestClassifier(n_estimators=100,random_state=42)
model.fit(x_train,y_train)

y_pred=model.predict(test_df)
passenger_ids=pd.read_csv('/content/drive/MyDrive/Titanic/test.csv')['PassengerId']
submission=pd.DataFrame({'PassengerId':passenger_ids,'Survived':y_pred})
submission.to_csv('submission.csv',index=False)
submission.head()

x_1, x_2, y_1, y_2 = train_test_split(x_train, y_train, test_size=0.2, random_state=42)
model1=RandomForestClassifier(n_estimators=100,random_state=42)
model1.fit(x_1,y_1)
y_pred1=model1.predict(x_2)
y_pred1

print("Accuracy:",accuracy_score(y_2,y_pred1))
print("\nConfusion Matrix:\n",confusion_matrix(y_2,y_pred1))
print("\nClassification Report:\n",classification_report(y_2,y_pred1))

import joblib
joblib.dump(model,'model.pkl')